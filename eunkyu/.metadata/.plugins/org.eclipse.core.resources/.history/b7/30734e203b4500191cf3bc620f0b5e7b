package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main_1799 {
	
	static int n;
	static int[][] arr;
	static int[][] colorMap;
	static boolean[][] visited;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		arr = new int[n][n];
		colorMap = new int[n][n];
		
		for (int i = 0; i < n; i++) {
			String[] str = br.readLine().split(" ");
			for (int j = 0; j < n; j++) {
				arr[i][j] = Integer.parseInt(str[j]);
				if(i % 2 == 0) {
					if(j % 2 == 0) {
						colorMap[i][j] = 1;
					}
				} else {
					if(j % 2 != 0) {
						colorMap[i][j] = 1;
					}
				}
			
			}
		}
		goGame();

	}

	private static void goGame() {
		visited = new boolean[n][n];
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if(arr[i][j] == 1 & !visited[i][j]) {
					visited[i][j] = true;
					if((i % 2 == 0 && j % 2 == 0) || (i % 2 != 0 && j % 2 != 0)) {
						dfs(i, j, 1);
					} else {
						dfs(i, j, 0);
					}
					visited[i][j] = false;
				}
			}
		}
		
	}

	private static void dfs(int y, int x, int color) {
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		
		for (int i = 0; i < 4; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];
		
			if(nextX >= 0 && nextX < n && nextY >= 0 && nextY < n
					&& !visited[nextY][nextX] && arr[nextY][nextX] != 0
					&& color[nextY][nextX] == color) {
				
			}
		}
		
	}
}