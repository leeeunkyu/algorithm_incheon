package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

public class Main_1941 {
	
	static int n = 5;
	static char[][] arr;
	static int res;
	static boolean[][] visited;
	static HashSet<String> hs;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		arr = new char[n][n];
		hs = new HashSet<>();
		for (int i = 0; i < n; i++) {
			arr[i] = br.readLine().toCharArray();
		}
		/*for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(arr[i][j]);
			}
			System.out.println();
		}*/
		res = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				visited = new boolean[n][n];
				bfs(i , j);		
			}
		}
		System.out.println(res);
		
	}

	private static void bfs(int i, int j) {
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		visited[i][j] = true;
		
		Queue<Point_1941> points = new LinkedList<Point_1941>();
		
		if(arr[i][j] == 'Y')
			points.add(new Point_1941(i, j, 1, 0, ""+i+j+","));
		else
			points.add(new Point_1941(i, j, 0, 1, ""+i+j+","));
		
		while (!points.isEmpty()) {
			Point_1941 point = points.poll();
			int px = point.getX();
			int py = point.getY();
			int a = point.getA();
			int b = point.getB();
			String str = point.getStr();
			
			if(a + b == 7) {
				String[] temp = str.split(",");
				int[] temp2 = new int[7];
				for (int k = 0; k < temp.length; k++) {
					temp2[k] = Integer.parseInt(temp[k]);
				}
				Arrays.sort(temp2);
				String str2 = "";
				for (int k = 0; k < temp2.length; k++) {
					str2 += temp2[k];
				}
				System.out.println(str2);
				
				if(!hs.contains(str2)) {
					hs.add(str2);
					if(b > a) {
						++res;	
					}
				}
				continue;
			}
			loop:
			for (int dir = 0; dir < 4; dir++) {
				int nextX = px + dx[dir];
				int nextY = py + dy[dir];
				if(nextX >= 0 && nextX < n 
						&& nextY >= 0 && nextY < n
						/*&& !visited[nextY][nextX]*/) {
					visited[nextY][nextX] = true;
					String temp = ""+nextY+nextX;
					String[] check = str.split(",");
					for (int k = 0; k < check.length; k++) {
						if(check[k].equals(temp)) {
							continue loop;
						}
					}
					if(arr[nextY][nextX] == 'Y') {
						points.add(new Point_1941(nextY, nextX, a + 1, b,str+nextY+nextX+","));
					}
					else {
						points.add(new Point_1941(nextY, nextX, a, b + 1,str+nextY+nextX+","));
					}
				}
			}
			
		}
	}
}

class Point_1941 {
	int y;
	int x;
	int a; //Y
	int b; //S 4¸íÀº µÅ¾ßÇÔ
	String str;
	
	
	public Point_1941(int y, int x, int a, int b, String str) {
		super();
		this.y = y;
		this.x = x;
		this.a = a;
		this.b = b;
		this.str = str;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getA() {
		return a;
	}
	public void setA(int a) {
		this.a = a;
	}
	public int getB() {
		return b;
	}
	public void setB(int b) {
		this.b = b;
	}

	public String getStr() {
		return str;
	}

	public void setStr(String str) {
		this.str = str;
	}
	
	
}