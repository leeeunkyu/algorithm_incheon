package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main_3190 {
	static int n;
	static int k;
	static int l;
	static final int APPLE_CODE = 1;
	static final int SNAKE_CODE = 2;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		k = Integer.parseInt(br.readLine());
		
		int[][] arr = new int[n][n];
		//Apple_3190[] apples = new Apple_3190[2];
		
		for (int i = 0; i < k; i++) {
			String[] str = br.readLine().split(" "); //0이 행 1 이열
			arr[Integer.parseInt(str[0])][Integer.parseInt(str[1])] = APPLE_CODE; //1이면 사과 , 2면 뱀
		}
		
		Queue<Order_3190> orders = new LinkedList<Order_3190>();
		for (int i = 0; i < l; i++) {
			String[] str = br.readLine().split(" "); //0이 행 1 이열
			Order_3190 order_3190 = new Order_3190(Integer.parseInt(str[0]), str[1].charAt(0));
			orders.add(order_3190);
		}		
		goSnake(arr , orders);
	}
	/*
	 * 0 0 0 0 0 0
	 * 0 0 0 0 0 0
	 * 0 0 0 0 0 0
	 * 0 0 0 0 0 0
	 * 0 0 0 0 0 0
	 * 0 0 0 0 0 0
	 */
	private static int goSnake(int[][] arr, Queue<Order_3190> orders) {
		//D는 오른쪽으로 90도 회전, L은 왼쪽으로 회전
		int time = 0;
		//북, 동, 남, 서
		//1, 2, 3, 4
		//오른쪽 : 북 - 동 - 남 - 서
		//왼쪽: 북 - 서 - 남- 동 (1, 4, 3, 2)
		int x = 0;
		int y = 0;
		int size = 1;
		int orderTime = 0;
		int dirNum = 2;
		
		Order_3190 order = orders.poll();
		if(order != null)
			orderTime = order.getStep();
		else
			return n;
		
		arr[y][x] = SNAKE_CODE;
		
		while (x >= 0 && x < n && y >= 0 && y < n) {
			/*
			 * 좌표 이동 코드
			 */			
			if(time == orderTime && !orders.isEmpty()) {
				//방향 전환
				order = orders.poll();
				orderTime = order.getStep();
				char dir = order.getDir();
				if(dir == 'D') {
					//오른쪽
					dirNum = (dirNum + 1) % 4;
					if(dirNum == 0)
						dirNum = 4;
				} else {
					//왼쪽
					dirNum = (dirNum - 1) % 4;
					if(dirNum == 0)
						dirNum = 4;
				}
			}
			//idx + 1
			int[] dx = {0, 1, 0, -1};
			int[] dy = {-1, 0, 1, 0};
			for (int i = 0; i < size; i++) {
				//크기만큼
				x = x + dx[dirNum];
				y = y + dy[dirNum];
				switch (dirNum) {
				case 1:
					arr[y + i][x] = 0;
					y -= 1;
					arr[y + i][x] = SNAKE_CODE;	
					break;
				case 2:
					arr[y][x - i] = 0;
					x += 1;
					arr[y][x - i] = SNAKE_CODE;	
					break;
				case 3:
					arr[y - i][x] = 0;
					y += 1;
					arr[y - i][x] = SNAKE_CODE;	
					break;
				case 4:
					arr[y][x + i] = 0;
					x -= 1;
					arr[y][x + i] = SNAKE_CODE;	
					break;
				
			}
			
			time++;
		}
		return time;
	}
}

class Snake_3190 {
	int x;
	int y;
	
	public Snake_3190(int x, int y) {
		super();
		this.x = x;
		this.y = y;
	}
	
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
}

class Order_3190 {
	int step;
	char dir;
	
	public Order_3190(int step, char dir) {
		super();
		this.step = step;
		this.dir = dir;
	}
	
	public int getStep() {
		return step;
	}
	public void setStep(int step) {
		this.step = step;
	}
	public char getDir() {
		return dir;
	}
	public void setDir(char dir) {
		this.dir = dir;
	}
}
