package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//11½Ã 20ºÐ ~ 12½Ã 50ºÐ
public class Solution_5650 {
	
	static int n;
	static int holeSize = 6;
	static int[][] arr;
	static Hole_5650[][] hole;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		for (int tc = 1; tc <= testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			hole = new Hole_5650[2][11];
			arr = new int[n][n];
			
			for (int i = 0; i < n; i++) {
				String[] str = br.readLine().split(" ");
				for (int j = 0; j < n; j++) {
					int val = Integer.parseInt(str[j]);
					
					if(val >= 6 && val <= 10) {
						//¿úÈ¦
						if(hole[0][val] == null) {
							hole[0][val] = new Hole_5650(i, j, val, 0);
						} else {
							hole[1][val] = new Hole_5650(i, j, val, 1);
						}
					}
					arr[i][j] = val;
				}
			}
			
			int maxScore = 0;
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if(arr[i][j] == 0) {
						for (int dir = 0; dir < 4; dir++) {
							int score = goGame(i, j, dir);
							if(score > maxScore) {
								maxScore = score;
							}
						}
					}
				}
			}
			sb.append("#"+tc+" "+maxScore+"\n");			
		}
		System.out.println(sb);
	
	}


	private static int goGame(int y, int x, int dir) {
		//dir 0~3 0 ºÏ 1 µ¿ 2 ³² 3 ¼­
		int[] dx = {0, 1, 0, -1};
		int[] dy = {-1, 0, 1, 0};
		int cnt = 0;
		int nextX = x + dx[dir];
		int nextY = y + dy[dir];
		
		while(!(x == nextX && nextY == y)) {
			
			while(nextX >= 0 && nextX < n && nextY >= 0 && nextY < n) {
				if(x == nextX && y == nextY)
					return cnt;
				if(arr[nextY][nextX] != 0) {
					//ºí·Ï, ¿úÈ¦, ºí·¢È¦À» ¸¸³²
					int val = arr[nextY][nextX];
					if(val == -1) {
						return cnt;
					} else if(val >= 1 && val <= 5)  {
						//ºí·Ï
						dir = crashBlock(val, dir);
						cnt++;
					} else {
						//¿úÈ¦
						Hole_5650 h = getExitHole(nextY, nextX);
						nextX = h.getX();
						nextY = h.getY();
					}
				
				}
				
				nextX += dx[dir];
				nextY += dy[dir];
			}
			
			//º®¿¡ ºÎµóÄ§
			int[] dirChange = {2, 3, 0, 1};
			nextX -= dx[dir];
			nextY -= dy[dir];
			dir = dirChange[dir] ;
			cnt++;
		}
		
		return cnt;
	}

	private static int crashBlock(int val, int dir) {
		//dir 0~3 0 ºÏ 1 µ¿ 2 ³² 3 ¼­
		switch (val) {
		case 1:
			int[] dirChange1 = {2, 3, 1, 0};
			//dirChange ºÏ => ³² / µ¿ => ¼­ / ³²  => µ¿ / ¼­ => ºÏ
			dir = dirChange1[dir];
			break;
		case 2:
			int[] dirChange2 = {1, 3, 0, 2};
			//dirChange ºÏ => µ¿ / µ¿ => ¼­ / ³²  => ºÏ / ¼­ => ³²
			dir = dirChange2[dir];
			break;
		case 3:
			int[] dirChange3 = {3, 2, 0, 1};
			//dirChange ºÏ => ¼­ / µ¿ => ³² / ³²  => ºÏ / ¼­ => µ¿
			dir = dirChange3[dir];
			break;
		case 4:
			int[] dirChange4 = {2, 0, 3, 1};
			//dirChange ºÏ => ³²/ µ¿ => ºÏ / ³²  => ¼­ / ¼­ => µ¿
			dir = dirChange4[dir];
			break;
		case 5:
			int[] dirChange5 = {2, 3, 0, 1};
			//dirChange ºÏ => ³²/ µ¿ => ¼­ / ³²  => ºÏ / ¼­ => µ¿
			dir = dirChange5[dir];
			break;
		}
		return dir;
	}


	private static Hole_5650 getExitHole(int nextY, int nextX) {
		int index = 0;
		int num = 0;
		
		for (int i = 0; i < 2; i++) {
			for (int j = 6; j <= 10; j++) {
				Hole_5650 h = hole[i][j];
				if(h == null)
					continue;
				if(h.getX() == nextX && h.getY() == nextY) {
					index = i;
					num = j;
				}
			}
		}		
		return hole[(index + 1) % 2][num];
	}
	
}

class Hole_5650 {
	int y;
	int x;
	int num; //¿úÈ¦ ¹øÈ£
	int index; //2Â÷¿ø ¹è¿­ ¿úÈ¦±¸ºÐ¿ë 
		
	public Hole_5650(int y, int x, int num, int index) {
		super();
		this.y = y;
		this.x = x;
		this.num = num;
		this.index = index;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public int getIndex() {
		return index;
	}
	public void setIndex(int index) {
		this.index = index;
	}
}
