package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class Solution_5656 {
	
	static int n;
	static int w;
	static int h;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int testCase = Integer.parseInt(br.readLine());
		
		for (int tc = 1; tc <= testCase; tc++) {
			String[] info = br.readLine().split(" ");
			n = Integer.parseInt(info[0]);
			w = Integer.parseInt(info[1]);
			h = Integer.parseInt(info[2]);
			int[][] arr = new int[h][w];
			for (int i = 0; i < h; i++) {
				String[] stoneInfo = br.readLine().split(" ");
				for (int j = 0; j < w; j++) {
					arr[i][j] = Integer.parseInt(stoneInfo[j]);
				}
			}
			Stone_5656[] stones = topStone(arr);
			dropStone(arr, stones);
			
		}
		System.out.println(sb);
	}

	private static void dropStone(int[][] arr, Stone_5656[] stones) {
		int cnt = 0;
		for (int i = 0; i < w; i++) {
			Stone_5656 stone_5656 = stones[i];
			if(stone_5656 == null)
				continue;
			
		}
	}

	private static Stone_5656[] topStone(int[][] arr) {
		Stone_5656[] stones = new Stone_5656[w];
		
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				int val = arr[i][j];
				if(val != 0 && stones[j] == null) {
					stones[j] = new Stone_5656(i, j, val);
				}
			}
		}
		
		return stones;
	}
}

class Stone_5656 {
	int y;
	int x;
	int num;
	
	public Stone_5656(int y, int x, int num) {
		super();
		this.y = y;
		this.x = x;
		this.num = num;
	}
	
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
}
