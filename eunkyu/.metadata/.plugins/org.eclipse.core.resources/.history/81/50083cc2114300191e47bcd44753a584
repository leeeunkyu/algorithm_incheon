package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main_11724 {
	
	static int n;
	static int m;
	static boolean visited[][];
	static int[][] arr;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
		n = Integer.parseInt(str[0]);
		m = Integer.parseInt(str[1]);
		arr = new int[n][n];
		
		for (int i = 0; i < m; i++) {
			String[] info = br.readLine().split(" ");
			int a = Integer.parseInt(info[0]) - 1;
			int b = Integer.parseInt(info[1]) - 1;
			arr[a][b] = 1;
			arr[b][a] = 1;
		}
		visited = new boolean[n][n];
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if(arr[i][j] == 1) {
					dfs(i, j);
					cnt++;
				}
			}
		}
		System.out.println(cnt);
	}

	private static void dfs(int i, int j) {
		visited[i][j] = true;
		visited[j][i] = true;
		for (int j2 = 0; j2 < visited.length; j2++) {
			for (int k = 0; k < visited.length; k++) {
				if((i == j2 || j2 == j) && !visited[j2][k]) {
					dfs(j2, k);
				}
			}
		}
		arr[i][j] = 0;
		arr[j][i] = 0;
	}
}
