package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main_2629 {
	
	static int[] stones;
	static int[] balls;
	static int size;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		Queue<Integer> tempq = new LinkedList<Integer>();
		String[] str = br.readLine().split(" ");
		for (int i = 1; i <= n; i++) {
			stones[i] = Integer.parseInt(str[i]);
		}
		stones = new int[n + 1];
		
		int m = Integer.parseInt(br.readLine());
		balls = new int[m];
		String[] str2 = br.readLine().split(" ");
		for (int i = 0; i < m; i++) {
			balls[i] = Integer.parseInt(str2[i]);
		}
		size = n + 1;
		for (int i = 0; i < m; i++) {
			int val = balls[i];
			stones[0] = val;
			go();
		}
	}

	private static boolean go() {
		for (int pick = 1; pick < size / 2; pick++) {
			for (int i = 0; i < (1 << size); i++) {
				if(Integer.bitCount(i) == pick) {
					int a = 0;
					int b = 0;
					boolean[] visited = new boolean[size];
					for (int j = 0; j < size; j++) {
						if(((1 << j) & i) > 0) {
							a += stones[j];
							visited[j] = true;
						}
					}
				}
				
			}	
		}
		return false;
	}
}