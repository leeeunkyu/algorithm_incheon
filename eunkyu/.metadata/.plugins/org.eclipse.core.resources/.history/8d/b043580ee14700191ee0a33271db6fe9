package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

public class Solution_5648 {
	
	static int n;
	static Bio_5648[][] arr;
	static Bio_5648[] bioList;
	static final int INIT_SIZE = 10;
	static int size;
	static int sum;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		//원자들의 이동 방향은 상(0), 하(1), 좌(2), 우(3)로 주어진다.
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		
		for (int tc = 1; tc <= testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			size = n;
			arr = new Bio_5648[INIT_SIZE + 1][INIT_SIZE + 1];
			bioList = new Bio_5648[n];
			for (int i = 0; i < n; i++) {
				String[] str = br.readLine().split(" ");
				int x = Integer.parseInt(str[0]) + 5;
				int y = Integer.parseInt(str[1]) + 5;
				int dir = Integer.parseInt(str[2]);
				int k = Integer.parseInt(str[3]);
				Bio_5648 bio = new Bio_5648(y, x, dir, k);
				arr[INIT_SIZE - y][x] = bio;
				bioList[i] = bio;
			}
			while(size > 1) {
				goBio();				
			}
			System.out.println(sum);
		}
	}
	private static void goBio() {
		int[] dx = {0, 0, -1, 1};
		int[] dy = {-1, 1, 0, 0};
		int[][] visited = new int[INIT_SIZE][INIT_SIZE];
		HashSet<Integer> deleteList = new HashSet<Integer>();
		for (int i = 0; i < size; i++) {
			Bio_5648 bio = bioList[i];
			int x = bio.getX();
			int y = bio.getY();
			int dir = bio.getDir();
			x += dx[dir];
			y += dy[dir];
			if(x >= 0 && x < INIT_SIZE && y >= 0 && y < INIT_SIZE) {
				if(visited[y][x] == 0) {
					visited[y][x] = i;	
				} else {
					deleteList.add(i);
					deleteList.add(visited[y][x]);
				}	
			} else {
				deleteList.add(i);
			}
			
		}
		if(deleteList.size() < 1) {
			
			return;
		}
		for (int idx: deleteList) {
			sum += bioList[idx].getK();
			System.out.println("??");
			System.out.println(bioList[idx].getDir());
			bioList[idx] = bioList[size - 1];
			--size;
		}
		
		for (int i = 0; i < size; i++) {
			Bio_5648 bio = bioList[i];
			int x = bio.getX();
			int y = bio.getY();
			int dir = bio.getDir();
			arr[y][x] = null;
			x += dx[dir];
			y += dy[dir];
			arr[y][x] = new Bio_5648(y, x, dir, bio.getK());
		}
	}
}

class Bio_5648 {
	
	int y;
	int x;
	int dir;
	int k;
	
	public Bio_5648(int y, int x, int dir, int k) {
		super();
		this.y = y;
		this.x = x;
		this.dir = dir;
		this.k = k;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getDir() {
		return dir;
	}
	public void setDir(int dir) {
		this.dir = dir;
	}
	public int getK() {
		return k;
	}
	public void setK(int k) {
		this.k = k;
	}	
}
