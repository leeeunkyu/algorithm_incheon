package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main_2667 {
	
	static int cnt = 0;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int cnt = Integer.parseInt(br.readLine());
		int arr[][] = new int[cnt][cnt];
		int visited[][] = new int[cnt][cnt];
		
		System.out.println();
		for (int i = 0; i < cnt; i++) {
			char temp[] = br.readLine().toCharArray();
			for (int j = 0; j < arr[i].length; j++) {
					arr[i][j] = temp[j]-'0';
			}
		}
		
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr.length; j++) {
				System.out.print(arr[i][j]+" ");
			}
			System.out.println();
		}
		
		for (int i = 0; i < cnt; i++) {
			for (int j = 0; j < cnt; j++) {
				if(arr[i][j] == 1 && visited[i][j] == 0) {
					dfs(arr, visited, i, j);
					cnt++;
				}
			}
		}
	}

	private static void dfs(int[][] arr, int[][] visited, int i, int j) {
		int dx[] = {0, 0, 1, -1};
		int dy[] = {1, -1, 0, 0};
		
		visited[i][j] = 1;
		
		for (int k = 0; k < dy.length; k++) {
			int nextX = i + dx[i];
			int nextY = i + dy[i];
			
			if (nextX >= 0 && nextX < cnt && nextY >= 0 && nextY < cnt) {
				if(arr[nextX][nextY] == 1 && visited[nextY][nextX] == 0) {
					dfs(arr, visited, i, j);
				}
			}
		}
	}
}
