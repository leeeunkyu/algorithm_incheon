package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main_7576 {
	
	static int n;
	static int m;
	static int[][] arr;
	static boolean[][] visited;
	static int zeroVal;
	static int time;
	//정수 1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
		m = Integer.parseInt(str[0]);
		n = Integer.parseInt(str[1]);
		arr = new int[n][m];
		visited = new boolean[n][m];
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			String[] info = br.readLine().split(" ");
			for (int j = 0; j < m; j++) {
				int val = Integer.parseInt(info[j]);
				arr[i][j] = val;
				if(val == 0)
					cnt++;
			}
		}
		if(cnt == 0) {
			System.out.println(0);
			return;
		}
		goGame();
		print();
		if(check())
			System.out.println(-1);
		else
			System.out.println(time);
		
		
	}
	private static void print() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(arr[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
	private static boolean check() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(arr[i][j] == 0)
					return false;
			}
		}
		return true;
	}
	private static void goGame() {
		Queue<Point_7576> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(arr[i][j] == 1 && !visited[i][j]) {
					visited[i][j] = true;
					q.add(new Point_7576(i, j, 0));
				}
			}
		}
		
		bfs(q);

/*		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(arr[i][j] == 2) {
					arr[i][j] = 1;
					visited[i][j] = true;
				}
			}
		}*/

	}

	private static void bfs(Queue<Point_7576> pointq) {
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		int max = Integer.MIN_VALUE;
		while(!pointq.isEmpty()) {
			Point_7576 point  = pointq.poll();
			int px = point.getX();
			int py = point.getY();
			int t = point.getT();
			if(max < t)
				max = t;
			for (int dir = 0; dir < 4; dir++) {
				int nextX = px + dx[dir];
				int nextY = py + dy[dir];
				if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n) {
					if(arr[nextY][nextX] == 0) {
						arr[nextY][nextX] = 1;
						pointq.add(new Point_7576(nextY, nextX, t + 1));
					}
				}
			}
		}
		time = max;
		
	}
}

class Point_7576 {
	int y;
	int x;
	int t;
	
	public Point_7576(int y, int x, int t) {
		super();
		this.y = y;
		this.x = x;
		this.t = t;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}

	public int getT() {
		return t;
	}

	public void setT(int t) {
		this.t = t;
	}
	
}
