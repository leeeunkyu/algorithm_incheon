package algorithm;

import java.util.LinkedList;
import java.util.Queue;

public class Solution_3 {
	public static void main(String[] args) {
		String B [] = new String[5];
		B[0] = "X....";
		B[1] = ".X...";
		B[2] = "..O..";
		B[3] = "...X.";
		B[4] = ".....";
		new Solution_3().solution(B);
	}
	public int solution(String[] B) {
		int n = B.length;
		char arrList [][] = new char [n][n];
		boolean visited [][] = new boolean [n][n];
		int x = 0;
		int y = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				char val = B[i].charAt(j);
				arrList[i][j] = val;
				if(val == 'O') {
					x = j;
					y = i;
					break;
				}
			}
		}
		dfs(arrList, visited, x, y, false, n, 0);		
		return 0;
    }
	private void dfs(char[][] arrList, boolean[][] visited, int x, int y, boolean isX, int n, int score) {
		if(n == y) {
			System.out.println(score);
			return;
		}
		
		int dx[] = {-1, 1};
		int dy[] = {-1, -1};
		
		for (int i = 0; i < 2; i++) {
			int nextX = x + dx[i]; //За
			int nextY = y + dy[i]; //ї­
			if(nextX < n && nextY < n && nextY >= 0 && !visited[nextX][nextY]) {
				visited[nextY][nextX] = true;
				if(arrList[nextY][nextX] == 'X') {
					isX = true;
				} else if (isX) {
					++score;
				}
				dfs(arrList, visited, nextX, nextY, isX, n, score);
			}
		}
		
	}
	
	
}
