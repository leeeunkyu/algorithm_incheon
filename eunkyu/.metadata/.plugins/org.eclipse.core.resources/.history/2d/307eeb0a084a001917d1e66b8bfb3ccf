package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//14:15~
public class Main_14888 {
	
	static int n;
	static int o = 4;
	static int min = 1000000000;
	static int max = 1000000000;
	static int numList[];
	static int orderList[];
	static int res1;
	static int res2;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		String[] info = br.readLine().split(" ");
		numList = new int[n];
		for (int i = 0; i < n; i++) {
			numList[i] = Integer.parseInt(info[i]);
		}
		
		String[] order = br.readLine().split(" ");
		orderList = new int[o];
		for (int i = 0; i < o; i++) {
			orderList[i] = Integer.parseInt(order[i]);
 		}
		
		dfs(1, numList[0]);
	}

	private static void dfs(int cnt, int val) {
		if(o == cnt) {
			if(res1 < val)
				res1 = val;
			if(res2 > val)
				res2 = val;
			return;
		}
		
		for (int i = 0; i < o; i++) {
			int order = orderList[i];
			if(order == 0)
				continue;
			int val2;
			switch (i) {
			case 0:
				val2 = val + numList[cnt];
				dfs(cnt, val2);
				break;
			case 1:
				val2 = val - numList[cnt];
				dfs(cnt, val2);
				break;
			case 2:
				val2 = val * numList[cnt];
				dfs(cnt, val2);
				break;
			case 3:
				if(val < 0) {
					val *= -1;
				}
				val2 = val / numList[cnt];
				if(val < 0) {
					val2 *= -1;
				}
				dfs(cnt, val2);
				break;
			}
		}
	}
}