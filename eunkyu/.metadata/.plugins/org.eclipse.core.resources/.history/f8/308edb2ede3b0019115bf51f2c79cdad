package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Solution_1767 {
	
	static int n;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		
		for (int tc = 0; tc < testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			int[][] arr = new int[n][n];
			Queue<Core_1767> cores = new LinkedList<Core_1767>();
			for (int i = 0; i < n; i++) {
				String[] cellInfo = br.readLine().split(" ");
				for (int j = 0; j < n; j++) {
					arr[i][j] = Integer.parseInt(cellInfo[j]);
					cores.add(new Core_1767(i, j));
				}
			}
			
			dfs(arr, cores);
		}
	}

	private static void dfs(int[][] arr, Queue<Core_1767> cores) {
		Core_1767 core = cores.poll();
		int[] dx = {-1, 1, 0, 0};
		int[] dy = {0, 0, 1, -1};
		int cnt = 0;
		int x = core.getX();
		int y = core.getY();
		loop:
		for (int i = 0; i < 4; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			while(nextX >= 0 && nextX < n && nextY >= 0 && nextY < n) {
				if(arr[nextY][nextX] == 1) {
					continue loop;
				}
				nextX += dx[i];
				nextY += dy[i];
				++cnt;
			}
			
			while (nextX == x-dx[i] && nextY == y-dy[i]) {
				arr[nextY][nextX] = 2;
				nextX -= dx[i];
				nextY -= dy[i];
			}
			
		}
	}
	
}

class Core_1767 {
	int y;
	int x;
	
	public Core_1767(int y, int x) {
		super();
		this.y = y;
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
}
