package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
public class Solution_5648 {
	
	static int n;
	static Bio_5648[] bioList;
	static final int INIT_SIZE =2000;
	static int size;
	static int sum;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		//원자들의 이동 방향은 상(0), 하(1), 좌(2), 우(3)로 주어진다.
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		for (int tc = 1; tc <= testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			size = n;
			bioList = new Bio_5648[n];
			int maxX = Integer.MIN_VALUE;
			int minX = Integer.MAX_VALUE;
			int maxY = Integer.MIN_VALUE;
			int minY = Integer.MAX_VALUE;
			for (int i = 0; i < n; i++) {
				String[] str = br.readLine().split(" ");
				int x = Integer.parseInt(str[0]);
				int y = Integer.parseInt(str[1]);
				int dir = Integer.parseInt(str[2]);
				int k = Integer.parseInt(str[3]);
				Bio_5648 bio = new Bio_5648(y, x, dir, k, false);
				if(x > maxX) {
					maxX = x;
				}
				if(x < minX) {
					minX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				if(y < minY) {
					minY = y;
				}
				bioList[i] = bio;
			}
			
			for (int i = 0; i < n; i++) {
				Bio_5648 bio = bioList[i];
				bio.setX(bio.getX() + (minX*-1));
				bio.setY(bio.getY() + (minY*-1));
			}
			sum = 0;
			goBio();				
			sb.append("#"+tc+" "+sum+"\n");
		}
		System.out.println(sb);
	}
	private static void goBio() {
		int[] dx = {0, 0, -1, 1};
		int[] dy = {1, -1, 0, 0};
		while(size > 1) {
			HashSet<Integer> deleteList = new HashSet<Integer>();
			int[][] visited = new int[INIT_SIZE + 1][INIT_SIZE + 1];
			for (int i = 0; i < size; i++) {
				
				Bio_5648 bio = bioList[i];
				int x = bio.getX();
				int y = bio.getY();
				int dir = bio.getDir();
				x += dx[dir];
				y += dy[dir];
				
				//check(i, x, y, dir, deleteList);
				
				if(x >= 0 && x < INIT_SIZE + 1 && y >= 0 && y < INIT_SIZE + 1) {
					if(visited[y][x] == 0) {
						visited[y][x] = i;	
					} else {
						deleteList.add(i);
						deleteList.add(visited[y][x]);
					}	
				} else {
					bioList[i].setOut(true);
					deleteList.add(i);
				}
				
			}

			for (int idx: deleteList) {
				if(!bioList[idx].isOut)
					sum += bioList[idx].getK();
				bioList[idx] = bioList[size - 1];
				--size;
			}
			
			for (int i = 0; i < size; i++) {
				Bio_5648 bio = bioList[i];
				int x = bio.getX();
				int y = bio.getY();
				int dir = bio.getDir();
				x += dx[dir];
				y += dy[dir];
				Bio_5648 tempbio = new Bio_5648(y, x, dir, bio.getK(), false);
				bioList[i] = tempbio;
			}			
		}
	}
	private static void check(int idx, int x, int y, int dir, HashSet<Integer> deleteList) {
		int[] dx = {0, 0, -1, 1};
		int[] dy = {1, -1, 0, 0};
		//0, 1   2,3
		boolean isOut = true;
		for (int i = 0; i < size; i++) {
			int dir2 = bioList[i].getDir();
			if(Math.abs(dir - dir2) == 1) {
				if(dir == 1 && dir2 == 2)
					continue;
				if((dir == 1 || dir == 0) && x == bioList[i].getX()) {
					isOut = false;
					deleteList.add(i);
					break;
				}
				if((dir == 2 || dir == 3) && y == bioList[i].getY()) {
					isOut = false;
					deleteList.add(i);
					break;
				}
			}
		}
		bioList[idx].setOut(isOut);
		deleteList.add(idx);
	}
}

class Bio_5648 {
	
	int y;
	int x;
	int dir;
	int k;
	boolean isOut;
	public Bio_5648(int y, int x, int dir, int k, boolean isOut) {
		super();
		this.y = y;
		this.x = x;
		this.dir = dir;
		this.k = k;
		this.isOut = isOut;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getDir() {
		return dir;
	}
	public void setDir(int dir) {
		this.dir = dir;
	}
	public int getK() {
		return k;
	}
	public void setK(int k) {
		this.k = k;
	}

	public boolean isOut() {
		return isOut;
	}

	public void setOut(boolean isOut) {
		this.isOut = isOut;
	}
	
}
