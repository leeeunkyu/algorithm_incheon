package algorithm;

import java.util.LinkedList;
import java.util.Queue;

public class Solution_3 {
	public static void main(String[] args) {
		String B [] = new String[5];
		B[0] = "X....";
		B[1] = ".X...";
		B[2] = "..O..";
		B[3] = "...X.";
		B[4] = ".....";
		new Solution_3().solution(B);
	}
	public int solution(String[] B) {
		Queue<Bot> q = new LinkedList<Bot>();
		int n = B.length;
		char arrList [][] = new char [n][n];
		boolean visited [][] = new boolean [n][n];
		int x = 0;
		int y = 0;
		int score = 0;
		boolean isX = false;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				char val = B[i].charAt(j);
				arrList[i][j] = val;
				if(val == 'O') {
					x = j;
					y = i;
				}
			}
		}
		dfs(arrList, visited,x, y, isX, n, 0);		
		return 0;
    }
	private void dfs(char[][] arrList, boolean[][] visited, int x, int y, boolean isX, int n, int score) {
		if(n == y) {
			System.out.println(score);
			return;
		}
		Bot bot = new Bot(x, y);
		x = bot.getX();
		y = bot.getY();
		
		int dx[] = {1, -1};
		int dy[] = {1, 1};
		
		for (int i = 0; i < 2; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			if(nextX >= 0 && nextX < n && nextY < n && !visited[nextX][nextY]) {
				if(arrList[nextX][nextY] == 'X') {
					visited[nextX][nextY] = true;
					isX = true;
				
				}
			}
		}
		
	}
	
	
}

class Bot{
	private int x;
	private int y;

	public Bot(int x, int y) {
		super();
		this.x = x;
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	
	
}
