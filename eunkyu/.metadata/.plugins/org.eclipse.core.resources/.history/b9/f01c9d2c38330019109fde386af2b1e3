package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class Zoom_2 {
	static int N;
	static int M;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = 3;
		M = 5;
		int[][] A = new int [N][M];
		for (int i = 0; i < A.length; i++) {
			String str[] = br.readLine().split(" ");
			for (int j = 0; j < A.length; j++) {
				A[i][j] = Integer.parseInt(str[j]);
			}
		}
		new Zoom_2().solution(A, N, M);
	}

	private void solution(int[][] a, int n, int m) {
		PriorityQueue<Pivot> pivots = new PriorityQueue<Pivot>();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				pivots.add(new Pivot(j, i, a[i][j]));
			}
		}
		int res = bfs(a, pivots);
		
		while(res != 0) {
			res = bfs(a, pivots);
		}
		
		System.out.println(res);
		
		
	}

	private int bfs(int[][] a, PriorityQueue<Pivot> pivots) {
		boolean[][] visited = new boolean [N][M];
		int max = 0;
		String str = "";
		
		Pivot temp = pivots.peek();
		visited[temp.getY()][temp.getX()] = true;
		str += temp.getNum();
		System.out.println(temp.getNum());
		Queue<Pivot> q = new LinkedList<Pivot>();
		q.add(pivots.poll());
		while(!q.isEmpty()) { 
			Pivot pivot = q.poll();
			int x = pivot.getX();
			int y = pivot.getY();
			int num = pivot.getNum();
			
			int[] dx = {0, 0, 1, -1};
			int[] dy = {1, -1, 0, 0};
			
			for (int i = 0; i < 4; i++) {
				int nextX = x + dx[i];
				int nextY = y + dy[i];
				
				if(nextX >= 0 && nextX < M && nextY >= 0 && nextY < N
						&& !visited[nextY][nextX]) {
					visited[nextY][nextX] = true;
					str += a[nextY][nextX];
					q.add(new Pivot(nextX, nextY, a[nextY][nextX]));
					System.out.println(str);
				}
				
				if(str.length() >= 4 && max > Integer.parseInt(str)) {
					str = str.substring(0, str.length() - 1);
					System.out.println("??"+str);
				} else {
					max = Integer.parseInt(str);
				}
			}
		}
		if(str.length() < 4) 
			return 0;
		else
			return max;
	}
}

class Pivot implements Comparable<Pivot>{
	int x;	//x좌표 행렬의 열
	int y;  //y좌표 행렬의 행
	int num; //해당 값
	
	public Pivot(int x, int y, int num) {
		super();
		this.x = x;
		this.y = y;
		this.num = num;
	}
	
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}

	@Override
	public int compareTo(Pivot pivot) {
		return pivot.getNum() - this.getNum();
	}
	
	
}
