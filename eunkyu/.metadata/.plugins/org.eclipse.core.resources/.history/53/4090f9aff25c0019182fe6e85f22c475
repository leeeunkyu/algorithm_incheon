package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

//15:30
public class Main_16236 {
	
	static int n; //크기
	static int m; //물고기
	static int[][] arr;	
	static boolean[][] visited;
	static int eatCnt;
	static int totalTime;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		arr = new int[n][n];
		visited = new boolean[n][n];
		Shark_16236 shark = null;
		for (int i = 0; i < n; i++) {
			String[] str = br.readLine().split(" ");
			for (int j = 0; j < n; j++) {
				int val = Integer.parseInt(str[j]);
				arr[i][j] = val;
				if(val == 9) {
					shark = new Shark_16236(i, j, 2, 0);
				}
			}			
		}
		
		eatCnt = 0;
		while(isEat(shark.getSize())) {
			goGame(shark);	
		}
		System.out.println(totalTime);
		
		
	}

	private static boolean isEat(int size) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if(arr[i][j] > 0 && arr[i][j] < size)
					return true;
			}
		}
		return false;
	}

	private static void goGame(Shark_16236 shark) {
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		Queue<Shark_16236> sharkq = new LinkedList<Shark_16236>();
		visited[shark.getY()][shark.getX()] = true;
		
		sharkq.add(shark);
		
		Queue<Shark_16236> eatFish = new LinkedList<Shark_16236>();
		int eatTime = Integer.MAX_VALUE;
		
		while(!sharkq.isEmpty()) {
			Shark_16236 s = sharkq.poll();
			int sx = s.getX();
			int sy = s.getY();
			int size = s.getSize();
			int step = s.getStep();
			if(step >= eatTime) {
				continue;
			}
			for (int dir = 0; dir < 4; dir++) {
				int nextX = sx + dx[dir];
				int nextY = sy + dy[dir];
				
				if(nextX >= 0 && nextX < n && nextY >= 0 && nextY < n
						&& arr[nextY][nextX] <= size &&!visited[nextY][nextX]) {
					if(arr[nextY][nextX] != 0 && arr[nextY][nextX] < size) {
						//eat
						eatFish.add(new Shark_16236(nextY, nextX, arr[nextY][nextX], 0));
						eatTime = step + 1;
					} else {
						sharkq.add(new Shark_16236(nextY, nextX, size, step + 1));
					}
					visited[nextY][nextX] = true;
				}
			}
		}
		
		visitClear();
		if(eatFish.size() > 0) {
			totalTime += eatTime;
			++eatCnt;
			eatFish(eatFish, shark);
		}
		
	//	print(shark.size);
		
	}

	private static void print(int size) {
		System.out.println("sharksize: "+size);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(arr[i][j]+" ");
			}
			System.out.println();
		}
	}

	private static void eatFish(Queue<Shark_16236> eatFish, Shark_16236 shark) {
		int dist = Integer.MAX_VALUE;
		int x = 0;
		int y = 0;
		int sx = shark.getX();
		int sy = shark.getY();
		while(!eatFish.isEmpty()) { 
			Shark_16236 fish = eatFish.poll();
			int fx = fish.getX();
			int fy = fish.getY();
			int d = Math.abs(sx - fx) + Math.abs(sy - fy);
			if(d < dist) {
				dist = d;
				x = fx;
				y = fy;
			}else if(d == dist) {
				if(fy < y) {
					y = fy;
					x = fx;
				} else if(fy == y) {
					if(fx < x) {
						y = fy;
						x = fx;
					}
				}
			}
		}
		
		arr[y][x] = 0;
		arr[y][x] = 9;
		arr[shark.getY()][shark.getX()] = 0;
		if(eatCnt == shark.getSize()) {
			shark.setSize(eatCnt + 1);
			eatCnt = 0;
		}
		shark.setX(x);
		shark.setY(y);
	
	}

	private static void visitClear() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				visited[i][j] = false;
			}
		}
	}
}

class Shark_16236 {
	int y;
	int x;
	int size;
	int step;
	
	public Shark_16236(int y, int x, int size, int step) {
		super();
		this.y = y;
		this.x = x;
		this.size = size;
		this.step = step;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getSize() {
		return size;
	}
	public void setSize(int size) {
		this.size = size;
	}

	public int getStep() {
		return step;
	}

	public void setStep(int step) {
		this.step = step;
	}
	
	
}