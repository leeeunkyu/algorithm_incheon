package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//13:20
public class Main_17136 {
	
	static int n = 10;
	static int res = 0;
	static int res2 = 0;
	static int[][] arr;
	static int[] nums = {0, 5, 5, 5, 5, 5};
	static boolean[][] visited;
	static int drawNum = 0;
	static int drawNum2 = 0;
	static int totalNum = 0;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		arr = new int[n][n];
		visited = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			String[] str = br.readLine().split(" ");
			for (int j = 0; j < n; j++) {
				int val = Integer.parseInt(str[j]);
				arr[i][j] = val;
				if(val == 1)
					++totalNum;
			}
		}
		
		for (int i = 5; i >= 1; i--) {
			go(i);
		}
		for (int i = 5; i >= 1; i--) {
			go2(i);
		}
		int a = 0;
		if(drawNum != totalNum)
			res = -1;
		if(drawNum2 != totalNum)
			res2 = -1;
		if(res < res2) {
			if(res == -1)
				System.out.println(res2);
			else
				System.out.println(res);
		} else {
			if(res2 == -1)
				System.out.println(res);
			else
				System.out.println(res2);
		}
	}
	private static void go2(int val) {
		for (int i = n - 1; i  >= 0; i--) {
			for (int j = n - 1; j >= 0; j--) {
				if(arr[i][j] == 1 && !visited[i][j] && check(i, j, val)
						&& nums[val] > 0) {
					draw2(i, j, val);
					++res2;
					nums[val] -= 1;
				}
			}
		}
		
	}
	private static void draw2(int y, int x, int idx) {
		for (int i = y; i > y - idx; i--) {
			for (int j = x; j > x - idx; j--) {
				visited[i][j] = true;
				++drawNum2;
			}
		}
	}
	private static void go(int val) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if(arr[i][j] == 1 && !visited[i][j] && check(i, j, val)
						&& nums[val] > 0) {
					draw(i, j, val);
					++res;
					nums[val] -= 1;
				}
			}
		}
	}

	/*private static void goGame(int a, int b) {
		if(res != -1 && cnt >= res)
			return;
		int div = (total - drawNum) / 5;
		if(res != -1 && div + cnt >= res) {
			return;
		}
		if(drawNum == total) {
			if(res == -1 || res < cnt)
				res = cnt;
			return;
		}
		
		for (int i = a; i < n; i++) {
			for (int j = b; j < n; j++) {
				if(arr[i][j] == 1 && !visited[i][j]) {
					setMap(i, j);
				}
			}
			a = 0;
			b = 0;
		}
	}

	private static void setMap(int y, int x) {
		for (int i = 5; i >= 1; i--) {
			int idx = check(y, x, i);
			if(nums[idx] > 0) {
				draw(y, x, idx);
				nums[idx] -= 1;
				++cnt;
				goGame(y, x + idx);
				nums[idx] += 1;
				--cnt;
				erase(y, x, idx);
			}
		}
	}

	private static void print() {
		System.out.println();
		System.out.println("drawNum: "+drawNum+"  cnt: "+cnt);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if(visited[i][j])
					System.out.print("T ");
				else
					System.out.print("F ");
			}
			System.out.println();
		}
	}
*/
	private static void erase(int y, int x, int idx) {
		for (int i = y; i < y + idx; i++) {
			for (int j = x; j < x + idx; j++) {
				visited[i][j] = false;
				--drawNum;
			}
		}
	}

	private static void draw(int y, int x, int idx) {
		for (int i = y; i < y + idx; i++) {
			for (int j = x; j < x + idx; j++) {
				visited[i][j] = true;
				++drawNum;
			}
		}
	}

	private static boolean check(int y, int x, int idx) {
		//idx 1, 2, 3....5
		if(y - idx + 1 < n && x - idx + 1 < n &&
				arr[y][x - idx + 1] == 1 && arr[y - idx + 1][x] == 1 && arr[y - idx + 1][x] == 1
				&& !visited[y][x - idx + 1] && !visited[y - idx + 1][x] && !visited[y - idx + 1][x - idx + 1]) {
			for (int i = y; i > y - idx; i--) {
				for (int j = x; j > x - idx; j--) {
					if(i < 0 || i >= n || j < 0 || j >= n || 
							visited[i][j] || arr[i][j] != 1) {
						return false;
					}
				}
			}
		} else {
			return false;
		}
		
		
		return true;
	}
	
	private static boolean check2(int y, int x, int idx) {
		//idx 1, 2, 3....5
		if(y - idx + 1 < n && x - idx + 1 < n &&
				arr[y][x - idx + 1] == 1 && arr[y - idx + 1][x] == 1 && arr[y - idx + 1][x] == 1
				&& !visited[y][x - idx + 1] && !visited[y - idx + 1][x] && !visited[y - idx + 1][x - idx + 1]) {
			for (int i = y; i > y - idx; i--) {
				for (int j = x; j > x - idx; j--) {
					if(i < 0 || i >= n || j < 0 || j >= n || 
							visited[i][j] || arr[i][j] != 1) {
						return false;
					}
				}
			}
		} else {
			return false;
		}
		
		
		return true;
	}
}
