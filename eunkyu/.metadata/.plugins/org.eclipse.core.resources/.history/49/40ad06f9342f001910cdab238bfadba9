package algorithm;

import java.util.PriorityQueue;

public class Solution_2 {
	static PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
	
	public static void main(String[] args) {
		int A [] = {5, 4, 0, 3, 1, 6, 2};
		new Solution_2().solution(A);
		System.out.println(pq);
	}
	public int solution(int[] A) {
		int size = A.length;
		
		boolean visited [] = new boolean [size];
		
		for (int i = 0; i < size; i++) {
			if(!visited[i]) {
				visited[i] = true;
				dfs(i, i, 0, A, visited);
			}
		}
		
		return 0;
	}
	private static void dfs(int start, int now, int length, int[] A, boolean[] visited) {
		int next = A[now];
		length += 1;
		
		if (start == next) {
			pq.add(length);
			return;
		}
		if(!visited[next]) {
			visited[next] = true;
			dfs(start, now, length, A, visited);
		}
	}
}
