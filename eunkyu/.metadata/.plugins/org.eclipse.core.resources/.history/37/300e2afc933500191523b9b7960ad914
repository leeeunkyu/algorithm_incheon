package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

//초기 상태에서 줄기세포는 비활성 상태
//생명력 수치 X -> X시간동안 비 활성 그 후 활성
//활성 후 X시간이 지남 죽음 -> 죽은상태여도 그리드 크기는 차지
//1시간동안 상 하 좌 우 번식
//번식하는 방향에 이미 세포가 있으면 추가적으로 번식X
public class Solution_5653 {
	
	static int n;
	static int m;
	static int k;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Solution_5653 solution = new Solution_5653();
		StringBuilder sb = new StringBuilder();
		
		int testCase = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= testCase; tc++) {
			String[] info = br.readLine().split(" ");
			n = Integer.parseInt(info[0]); //세로크기
			m = Integer.parseInt(info[1]); //가로크기
			k = Integer.parseInt(info[2]); //시간
			Queue<Cell_5653> cells = new LinkedList<Cell_5653>();
			
			int[][] arr = new int[350][350];
			for (int i = 0; i < n; i++) {
				String[] arrInfo = br.readLine().split(" ");
				for (int j = 0; j < m; j++) {
					int val = Integer.parseInt(arrInfo[j]);
					arr[i + 350/2][j + 350/2] = val;
					if (val != 0) {
						cells.add(new Cell_5653(i + 350/2, j+ 350/2, 0, 1));
					}
				}
			}
			solution.goCell(arr, cells);
			int res = solution.sumCell(cells);
			sb.append("#"+tc+" "+res);
		}
	}

	private int sumCell(Queue<Cell_5653> cells) {
		int sum = 0;
		while (!cells.isEmpty()) {
			if(cells.poll().getState() != 3)
				sum += 1;
		}
		return sum;
	}

	private void goCell(int[][] arr, Queue<Cell_5653> cells) {
		Queue<Cell_5653> temps = new LinkedList<Cell_5653>();
		for (int i = 0; i < k; i++) {
			while (!cells.isEmpty()) {
				Cell_5653 cell = cells.poll();
				int y = cell.getY();
				int x = cell.getX();
				int num = cell.getNum();
				int state = cell.getState();
				if(state != 3) {
					num += 1;
					if(num == arr[y][x]) {
						if(state == 2) {
							cell.setState(3);
						} else if(state == 1) {
							cell.setState(2);
							cell.setNum(0);
						}
					} else {
						if(num == 1 && state == 2) {
							spreadCell(arr, y, x, temps);	
						}
						cell.setNum(num);
					}
					
					temps.add(cell);					
				}
			}
			
			while (!temps.isEmpty()) {
				Cell_5653 tempCells = temps.poll();
				cells.add(tempCells);
			}
			
		}
	}

	private void spreadCell(int[][] arr, int y, int x, Queue<Cell_5653> temps) {
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		for (int i = 0; i < 4; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			if(arr[nextY][nextX] == 0) {
				temps.add(new Cell_5653(nextY, nextX, 0, 1));
			}
		}
	}
}

//비활성상태 -> 1시간()
class Cell_5653 {
	int y;
	int x;
	int num; //몇 시간
	int state; //1 비활성 2활성 3죽음
	
	public Cell_5653(int y, int x, int num, int state) {
		super();
		this.y = y;
		this.x = x;
		this.num = num;
		this.state = state;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}

	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}
	
}
