package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;

//2:45
public class Main_1339 {
	
	static int n;	//1~10
	static char[][] words;
	static boolean[] visited;
	static int[] values;
	static int size;
	static int max;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n =  Integer.parseInt(br.readLine());
		words = new char[n][8];
		visited = new boolean[26];
		HashSet<Character> hs = new HashSet<Character>();
		for (int i = 0; i < n; i++) {
			words[i] = br.readLine().toCharArray();
			System.out.println(words[i].length);
			for (int j = 0; j < words[i].length; j++) {
				hs.add(words[i][j]);
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < words[i].length; j++) {
				System.out.print(words[i][j]+" ");
			}
			System.out.println();
		}
		values = new int[26];
		size = hs.size();
		for(char a: hs) {
			//System.out.println(a);
			visited[a - 'A'] = true;
		}
		max = Integer.MIN_VALUE;
		dfs(0, 9);
		System.out.println(max);
		
	}

	private static void dfs(int idx, int num) {
		if(num == 9 - size){
			int res = setVal();
			if(max < res) {
				max = res;
			}
			System.out.print("[");
			for (int i = 0; i < values.length; i++) {
				System.out.print(values[i]+" ");
			}
			System.out.println("]");
			return;
		}
		for (int i = 0; i < size; i++) {
			values[i] = num;
			dfs(idx + 1, num -1);
		}
	}

	private static int setVal() {
		int sum = 0;
		String str = "";
		for (int i = 0; i < n; i++) {
			str = "";
			for (int j = 0; j < words[i].length; j++) {
				str += values[words[i][j] - 'A'];
			}
			sum += Integer.parseInt(str);
		}
		return sum;
	}
}

class Word_1339 {
	char w;
	int v;
	
	public Word_1339(char w, int v) {
		super();
		this.w = w;
		this.v = v;
	}
	
	public char getW() {
		return w;
	}
	public void setW(char w) {
		this.w = w;
	}
	public int getV() {
		return v;
	}
	public void setV(int v) {
		this.v = v;
	}
}
