package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Solution_1767 {
	
	static int n;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		
		for (int tc = 0; tc < testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			int[][] arr = new int[n][n];
			Queue<Core_1767> cores = new LinkedList<Core_1767>();
			for (int i = 0; i < n; i++) {
				String[] cellInfo = br.readLine().split(" ");
				for (int j = 0; j < n; j++) {
					int val = Integer.parseInt(cellInfo[j]);
					arr[i][j] = val;
					if(val == 1)
						cores.add(new Core_1767(i, j));
				}
			}
			dfs(arr, cores, 0 );
		}
	}

	private static void dfs(int[][] arr, Queue<Core_1767> cores, int coreCnt) {
		if(cores.isEmpty()) {
			System.out.println();
			System.out.println(coreCnt - 1);
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					System.out.print(arr[i][j]+" ");
				}
				System.out.println();
			}
			return;
		}
		Core_1767 core = cores.poll();
		int[] dx = {-1, 1, 0, 0};
		int[] dy = {0, 0, 1, -1};
		int x = core.getX();
		int y = core.getY();
		loop:
		for (int i = 0; i < 4; i++) {
			if(x == 0 || x == n-1 || y == 0 || y == n-1) {
				dfs(arr, cores, ++coreCnt);
			}
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			while(nextX >= 0 && nextX < n && nextY >= 0 && nextY < n) {
				if(arr[nextY][nextX] == 1 || arr[nextY][nextX] == 2) {
					continue loop;
				}
				nextX += dx[i];
				nextY += dy[i];
			}
			nextX -= dx[i];
			nextY -= dy[i];
			int tempX = nextX;
			int tempY = nextY;
			//0 == 0 && 0 != 0
			while (!(tempX == x && tempY == y)) {
				arr[tempY][tempX] = 2;
				tempX -= dx[i];
				tempY -= dy[i];
			/*	for (int k = 0; k < n; k++) {
					for (int j = 0; j < n; j++) {
						System.out.print(arr[k][j]+" ");
					}
					System.out.println();
				}*/
			}
			dfs(arr, cores, ++coreCnt);
			while (!(nextX == x+dx[i]) && !(nextY == y+dy[i])) {
				arr[nextY][nextX] = 0;
				nextX -= dx[i];
				nextY -= dy[i];
			}
		}
	}
	
}

class Core_1767 {
	int y;
	int x;
	
	public Core_1767(int y, int x) {
		super();
		this.y = y;
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
}
