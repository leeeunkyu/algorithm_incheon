package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;


public class Main_11559 {
	
	static final int HEIGHT = 12;
	static final int WEIDTH = 6;
	static char[][] map;
	static boolean[][] visited;
	static int boomCnt = 0;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		map = new char[HEIGHT][WEIDTH];
		for (int i = 0; i < HEIGHT; i++) {
			char[] temp = br.readLine().toCharArray();
			map[i] = temp;
		}
		
		visited = new boolean[HEIGHT][WEIDTH];
		char[] word = {'R', 'G', 'B', 'P', 'Y'};
		
		boom();
		System.out.println(boomCnt);
	}

	private static void boom() {
		//가장 밑을 보자.
		boolean[][] boomList = new boolean[HEIGHT][WEIDTH];
		boolean isBoom = false;
		while(boomCnt == 0 || isBoom) {
			for (int i = 0; i < HEIGHT; i++) {
				for (int j = 0; j < WEIDTH; j++) {
					if(map[i][j] != '.' && !visited[i][j]) {
						boolean[][] tempBoom = new boolean[HEIGHT][WEIDTH];
						visited[i][j] = true;
						int cnt = bfs(i, j, map[i][j], tempBoom);
						if(cnt >= 3) {
							//터트리는 목록 리스트에 저장
							tempBoom[i][j] = true;
							copy(boomList, tempBoom);
							isBoom = true;
						}
					}
				}
			}
			
			goBoom(boomList);
			if(isBoom) {
				reset();			
			}	
		}
	}

	private static void reset() {
		for (int w = 0; w < WEIDTH; w++) {
			Queue<Character> q = new LinkedList<>();
			for (int h = HEIGHT - 1; h >= 0; h--) {
				if(map[h][w] != '.') {
					q.add(map[h][w]);
					map[h][w] = '.';
				}
			}
			int temp = HEIGHT - 1;
			while (!q.isEmpty()) {
				char val = q.poll();
				map[temp][w] = val;
				temp--;
			}
		}
	}

	private static void goBoom(boolean[][] boomList) {
		boomCnt += 1;
		for (int i = 0; i < HEIGHT; i++) {
			for (int j = 0; j < WEIDTH; j++) {
				if(boomList[i][j]) {
					map[i][j] = '.';
				}
			}
		}
	}

	private static void copy(boolean[][] boomList, boolean[][] tempBoom) {
		for (int i = 0; i < HEIGHT; i++) {
			for (int j = 0; j < WEIDTH; j++) {
				boomList[i][j] = tempBoom[i][j];
			}
		}
	}

	private static int bfs(int y, int x, char val, boolean[][] tempBoom) {
		Point_11559 p = new Point_11559(y, x);
		Queue<Point_11559> points = new LinkedList<Point_11559>();

		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0 ,0};
		
		int cnt = 0;
		points.add(p);
		
		while(!points.isEmpty()) {
			Point_11559 point = points.poll();
			int py = point.getY();
			int px = point.getX();
			for (int i = 0; i < 4; i++) {
				int nextX = px + dx[i];
				int nextY = py + dy[i];
				
				if(nextX >= 0 && nextX < WEIDTH && nextY >= 0 && nextY < HEIGHT) {
					if(val == map[nextY][nextX]) {
						//탐색 결과가 같은 문자라면
						cnt++;
						visited[nextY][nextX] = true;
						tempBoom[nextY][nextX] = true;
						points.add(new Point_11559(nextY, nextX));
						
					}
				}
			}
		}
		return cnt;
	}
}

class Point_11559 {
	int y;
	int x;
	
	public Point_11559(int y, int x) {
		super();
		this.y = y;
		this.x = x;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
}
