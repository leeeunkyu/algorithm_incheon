package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

public class Main_6603 {
	//1~49 6°³ »Ì±â
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		ArrayList<Integer> kList = new ArrayList<>();
		Map<Integer, ArrayList<Integer>> sMap = new HashMap<Integer, ArrayList<Integer>>();
		int k = 0;
		while(true) {
			String str[] = br.readLine().split(" ");
			k = Integer.parseInt(str[0]);
			if(k == 0)
				break;
			kList.add(k);
			ArrayList<Integer> sList = new ArrayList<>();	
			for (int i = 1; i < str.length; i++) {
				sList.add(Integer.parseInt(str[i]));
			}
			
			sMap.put(k, sList);
		}
		
		for (int i = 0; i < kList.size(); i++) {
			System.out.println(sMap.get(kList.get(i)));
			bfs(kList.get(i), sMap.get(kList.get(i)));
		}
	}

	private static void bfs(int n, ArrayList<Integer> list) {
		Queue<Integer> q = new LinkedList<Integer>();
		boolean visited[] = new boolean[n];
		while(!q.isEmpty()) {
			
		}
	}
}


