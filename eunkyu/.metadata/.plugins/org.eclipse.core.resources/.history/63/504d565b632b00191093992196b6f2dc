package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import javax.swing.plaf.SliderUI;

public class TestClass {
	
	static int n;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		double start;
		double end;	
		
		Stack<Integer> s = new Stack<Integer>();
		start = System.currentTimeMillis();
		for (int i = 0; i < 1000000; i++) {
			s.add(0);
		}
		for (int i = 0; i < 1000000; i++) {
			int a = s.pop();
		} 
		end = System.currentTimeMillis();
		System.out.println("stack: " + (end - start));
		
		Queue<Integer> q = new LinkedList<Integer>();
		start = System.currentTimeMillis();
		for (int i = 0; i < 1000000; i++) {
			q.add(0);
		}
		for (int i = 0; i < 1000000; i++) {
			int a = q.poll();
		} 
		end = System.currentTimeMillis();
		System.out.println("Queue: " + (end - start));
		
		Deque<Integer> dq = new LinkedList<Integer>();
		start = System.currentTimeMillis();
		for (int i = 0; i < 1000000; i++) {
			dq.addLast(0);;
		}
		for (int i = 0; i < 1000000; i++) {
			int a = dq.pollLast();
		} 
		end = System.currentTimeMillis();
		System.out.println("1. Deque: " + (end - start));
		
		start = System.currentTimeMillis();
		for (int i = 0; i < 1000000; i++) {
			dq.addFirst(0);;
		}
		for (int i = 0; i < 1000000; i++) {
			int a = dq.pollFirst();
		} 
		end = System.currentTimeMillis();
		System.out.println("2. Deque: " + (end - start));
		
		int arr[] = new int[1000000];
		
		start = System.currentTimeMillis();
		for (int i = 0; i < 1000000; i++) {
			arr[i] = 0;
		}
		for (int i = 0; i < 1000000; i++) {
			int a = arr[i];
		} 
		end = System.currentTimeMillis();
		System.out.println("array: " + (end - start));
	}

	
}
