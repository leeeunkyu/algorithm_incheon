package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
//18:30 ~ 
public class Main_7569 {
	
	static int m;	//상자칸의 가로수
	static int n;	//상자칸의 세로수
	static int h;	//높이
	static int[][][] arr;
	static boolean[][][] visited;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
	
		m = Integer.parseInt(str[0]);
		n = Integer.parseInt(str[1]);
		h = Integer.parseInt(str[2]);
		
		arr = new int[h][n][m];
		
//		System.out.println(h+"  "+n+"  "+m);
		
		boolean c = false;
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < n; j++) {
				String[] info = br.readLine().split(" ");
				for (int k = 0; k < m; k++) {
					int val = Integer.parseInt(info[k]);
					arr[i][j][k] = val;
					if(val == 0) {
						c = true;
					}
				}
			}
		}
		
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < n; j++) {
				for (int k = 0; k < m; k++) {
					System.out.print(arr[i][j][k]+" ");
					
				}
				System.out.println();
			}
		}
		
		if(!c) {
			System.out.println(0);
			return;
		}
		System.out.println(h+" "+n+" "+m);
		int t = 0;
		boolean isGo = true;
		while(true) {
			t++;
			visited = new boolean[h][n][m];
			int sum = 0;
			for (int i = 0; i < h; i++) {
				for (int j = 0; j < n; j++) {
					for (int k = 0; k < m; k++) {
						if(arr[i][j][k] == 0) {
							++sum;
						}
					}
				}
			}
			for (int i = 0; i < h; i++) {
				for (int j = 0; j < n; j++) {
					for (int k = 0; k < m; k++) {
						if(!visited[i][j][k] && arr[i][j][k] == 1) {
							visited[i][j][k] = true;
							bfs(i, j, k);
						}
					}
				}
			}
			System.out.println("sum: "+sum);
			for (int i = 0; i < h; i++) {
				for (int j = 0; j < n; j++) {
					for (int k = 0; k < m; k++) {
						if(arr[i][j][k] == 0) {
							--sum;
						}
					}
				}
			}
			print();
			if(sum == 0) {
				System.out.println(-1);
				break;
			}
		}
		
		
		
		
	
	
	}

	private static void print() {
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < n; j++) {
				for (int k = 0; k < m; k++) {
					System.out.print(arr[i][j][k]+" ");
					
				}
				System.out.println();
			}
		}
	}

	private static void bfs(int i, int j, int k) {
		int[] dx = {0, 0, 0, 0, 1, -1};
		int[] dy = {0, 0, 1, -1, 0, 0};
		int[] dl = {1, -1, 0, 0, 0, 0};
		Queue<Point_7569> points = new LinkedList<Point_7569>();
		points.add(new Point_7569(i, j, k));
		
		/*while(!points.isEmpty()) {
			Point_7569 point = points.poll();
			int pl = point.getL();
			int px = point.getX();
			int py = point.getY();
			for (int idx = 0; idx < 6; idx++) {
				int nextX = px + dx[idx];
				int nextY = py + dy[idx];
				int nextL = pl + dl[idx];
				if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n
						&& nextL >= 0 && nextL < h && !visited[nextL][nextY][nextX]
								&& arr[nextL][nextY][nextX] != -1) {
					visited[nextL][nextY][nextX] = true;
					points.add(new Point_7569(nextL, nextY, nextX));
					arr[nextL][nextY][nextX] = 1;
				}
			}
		
		}*/
		for (int idx = 0; idx < 6; idx++) {
			int nextX = k + dx[idx];
			int nextY = j + dy[idx];
			int nextL = i + dl[idx];
			if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n
					&& nextL >= 0 && nextL < h && !visited[nextL][nextY][nextX]
							&& arr[nextL][nextY][nextX] != -1) {
				visited[nextL][nextY][nextX] = true;
				points.add(new Point_7569(nextL, nextY, nextX));
				arr[nextL][nextY][nextX] = 1;
			}
		}
		
	}
}

class Point_7569 {
	int y;
	int x;
	int l;
	
	public Point_7569(int l, int y, int x) {
		super();
		this.y = y;
		this.x = x;
		this.l = l;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getL() {
		return l;
	}
	public void setL(int l) {
		this.l = l;
	}
}
