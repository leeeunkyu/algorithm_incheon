package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Main_2146 {
	static int cnt = 2;
	static int N;
	static int arr[][];
	static int vistied[][];
	static int map[][];
	static ArrayList<Integer> islandList = new ArrayList<>();
	
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		vistied = new int[N][N];
		map = new int[N][N];
		
		for (int i = 0; i < N; i++) {
			String str[] = br.readLine().split(" ");
			for (int j = 0; j < N; j++) {
				arr[i][j] = Integer.parseInt(str[j]);
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if(arr[i][j] == 1 && vistied[i][j] == 0) {
					dfsLabel(j, i);	
					int islandNum = cnt++;
					islandList.add(islandNum);
				}
				
			}
		}
		for (int i = 0; i < islandList.size(); i++) {
			System.out.println(islandList.get(i));
		}
		boolean nextIsland = false;
		int min = 99999;
		for (int i = 0; i < islandList.size(); i++) {
			int islandNum = islandList.get(i);
			int cnt = 0;
			for (int j = 0; j < N; j++) {
				nextIsland = false;
				cnt = 0;
				for (int k = 0; k < N; k++) {
					System.out.println("cnt: "+cnt +" j: "+j);

					if(arr[j][k] == 0) {
						cnt++;
					}
					
					if(arr[j][k] == islandNum) {
						nextIsland = true;
						cnt = 0;
					}
					if(nextIsland && arr[j][k] != 0 && arr[j][k] != islandNum) {
						if(min > cnt) {
							min = cnt;
							cnt = 0;
						}
					}
					
				}
			}
		}
		
		System.out.println("res: "+min);
		
		
		
		
		
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.print(arr[i][j]+" ");
			}
			System.out.println();
		}
		
		
		System.out.println();
		
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.print(vistied[i][j]+" ");
			}
			System.out.println();
		}
	}


	private static void dfsLabel(int x, int y) {
		int dx[] = {0, 0, 1, -1};
		int dy[] = {1, -1, 0, 0};
		int nextX = 0;
		int nextY = 0;
		
		arr[y][x] = cnt;
		vistied[y][x] = 1;
		
		for (int i = 0; i < 4; i++) {
			nextX = x + dx[i];
			nextY = y + dy[i];
			if(nextX >= 0 && nextX < N && nextY >=  0 && nextY < N) {
				if(arr[nextY][nextX] == 1 && vistied[nextY][nextX] == 0) {
					arr[nextY][nextX] = cnt;
					dfsLabel(nextX, nextY);			
				}
			}
		}
		
	}
}
