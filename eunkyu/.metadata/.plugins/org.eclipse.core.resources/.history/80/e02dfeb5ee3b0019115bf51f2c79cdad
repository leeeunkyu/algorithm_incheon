package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Solution_1767 {
	
	static int n;
	static int size;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		
		for (int tc = 0; tc < testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			int[][] arr = new int[n][n];
			Queue<Core_1767> cores = new LinkedList<Core_1767>();
			Queue<Core_1767> cores2 = new LinkedList<Core_1767>();
			for (int i = 0; i < n; i++) {
				String[] cellInfo = br.readLine().split(" ");
				for (int j = 0; j < n; j++) {
					int val = Integer.parseInt(cellInfo[j]);
					arr[i][j] = val;
					if(val == 1) {
						cores.add(new Core_1767(i, j));
						cores2.add(new Core_1767(i, j));
					}
				}
			}
			size = cores.size();
			Core_1767[] coresTemp = new Core_1767[size];
			for (int i = 0; i < coresTemp.length; i++) {
				coresTemp[i] = cores2.poll();
			}
			dfs(arr, cores, coresTemp,0 );
		}
	}

	private static void dfs(int[][] arr, Queue<Core_1767> cores, Core_1767[] coresTemp, int coreCnt) {
		if(cores.isEmpty()) {
			System.out.println();
			System.out.println(coreCnt);
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					System.out.print(arr[i][j]+" ");
				}
				System.out.println();
			}
			int cnt = 0;			
			return;
		}
		Core_1767 core = cores.poll();
		int[] dx = {-1, 1, 0, 0};
		int[] dy = {0, 0, 1, -1};
		int x = core.getX();
		int y = core.getY();
		loop:
		for (int i = 0; i < 4; i++) {
			
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			if(nextX < 0 || nextX >= n 
					|| nextY < 0 || nextY >= n) {
				dfs(arr, cores, coresTemp, ++coreCnt);
			}
			
			while(nextX >= 0 && nextX < n && nextY >= 0 && nextY < n) {
				if(arr[nextY][nextX] == 1 || arr[nextY][nextX] == 2) {
					continue loop;
				}
				nextX += dx[i];
				nextY += dy[i];
			}
			
			nextX -= dx[i];
			nextY -= dy[i];
			int tempX = nextX;
			int tempY = nextY;
			
			while (!(tempX == x && tempY == y)) {
				arr[tempY][tempX] = 2;
				tempX -= dx[i];
				tempY -= dy[i];
			}
			dfs(arr, cores, coresTemp, coreCnt+1);
			
			while (!(nextX == x && nextY == y)) {
				arr[nextY][nextX] = 0;
				nextX -= dx[i];
				nextY -= dy[i];
			}
		}
		
		int temp = coreCnt;
		while (temp < size) {
			cores.add(coresTemp[temp]);
			temp ++;
		}
		
	}
	
}

class Core_1767 {
	int y;
	int x;
	
	public Core_1767(int y, int x) {
		super();
		this.y = y;
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
}
