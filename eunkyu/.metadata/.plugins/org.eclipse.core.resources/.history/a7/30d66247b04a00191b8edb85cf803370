package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//10:11
public class Main_4902 {
	
	static int n;
	static int[][] arr;
	static int size;
	static boolean[][] type;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
		while(Integer.parseInt(str[0]) != 0) {
			n = Integer.parseInt(str[0]);
			arr = new int[n][(2 * n) - 1];
			int temp = 1;
			for (int i = 0; i < n; i++) {
				int width = i * 2 + 1;
				int k = 0;
				for (int j = n - (1 + i); k < width; j++) {
					arr[i][j] = Integer.parseInt(str[temp]);
					if((i + j) % 2 == 0)
						type[i][j] = true;
					++temp;
					++k;
				}
			}
			
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < 2 *n - 1; j++) {
					System.out.print(arr[i][j]+" ");
				}
				System.out.println();
			}
			System.out.println();
			
			dfs(0);
			
			str = br.readLine().split(" ");
		}
	
	
	}

	private static void dfs(int i) {
		if(i == n) {
			return;
		}
		
	}
}
