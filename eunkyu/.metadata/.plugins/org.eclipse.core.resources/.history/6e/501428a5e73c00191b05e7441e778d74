package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main_5213 {
	static int n;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		int[][] arr = new int[n][2*n];
		int line = (n * n) - (n / 2);
		int x = 0;
		int y = 1;
		for (int i = 0; i < line; i++) {
			String[] tailInfo = br.readLine().split(" ");
			if(y % 2 != 0) {	
				for (int j = 0; j < 2; j++) {
					arr[y - 1][x] = Integer.parseInt(tailInfo[j]);
					x++;
				}
				if(x == 2*n ) {
					++y;
					x = 0;
					continue;
				}
			}
			if(y % 2 == 0){
				for (int j = 0; j < 2; j++) {
					arr[y - 1][x+1] = Integer.parseInt(tailInfo[j]);
					x++;
				}
				if(x == 2*(n-1)) {
					++y;
					x = 0;
					continue;
				}
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 2 * n; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
		
		bfs(arr);
	}

	private static void bfs(int[][] arr) {
		boolean[][] visited = new boolean[n][2*n];
		Queue<Point_5213> points = new LinkedList<Point_5213>();
		points.add(new Point_5213(0, 0));
		while(!points.isEmpty()) {
			Point_5213 point = new Point_5213(0, 0);
			int x = point.getX();
			int y = point.getY();	
		}
		
		
	}
}

class Point_5213 {
	int y;
	int x;
	int nextCnt;
	
	public Point_5213(int y, int x) {
		super();
		this.y = y;
		this.x = x;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	
}