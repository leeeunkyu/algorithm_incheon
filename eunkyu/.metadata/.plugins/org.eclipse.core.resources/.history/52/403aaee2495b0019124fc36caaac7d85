package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//11:40
public class Solution_7393 {
	
	static int n;
	static int visied[];
	static boolean isOk[];
	static int res;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		
		for (int tc = 1; tc <= testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			res = 0;
			visied = new int[n];
			isOk = new boolean[10];
			for (int i = 1; i <= 9; i++) {
				visied[0] = i;
				isOk[i] = true;
				dfs(i, 1);
				isOk[i] = false;
				visied[0] = -1;
			}
			
			sb.append("#"+tc+" "+res+"\n");
		}
		System.out.println(sb);
	}

	private static void dfs(int idx, int cnt) {
		if(cnt == n) {
			
			return;
		} else {
			if(idx + 1 < 10) {
				visied[cnt] = idx + 1; 
				isOk[idx + 1] = true;
				dfs(idx + 1, cnt + 1);
				
			}
			if(idx - 1 >= 0) {
				visied[cnt] = idx - 1;
				isOk[idx + 1] = true;
				dfs(idx - 1, cnt + 1);
			}
		}
	}
}
