package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//13:30 ~ 2:00 2:20
public class Solution_4008 {
	
	static int n;
	static int order;
	static int[] nums;
	static int[] orders;
	static int[] arr;
	static int size;
	static int maxVal;
	static int minVal;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase= Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		
		for (int tc = 1; tc <= testCase; tc++) {
			n = Integer.parseInt(br.readLine());
			order = 4;
			
			nums = new int[n];
			orders = new int[order];
			size = n + n - 1;
			arr = new int[size];
			String[] str = br.readLine().split(" ");
			
			String[] info = br.readLine().split(" ");
			for (int i = 0; i < order; i++) {
				orders[i] = Integer.parseInt(str[i]);
			}
			for (int i = 0; i < n; i++) {
				nums[i] = Integer.parseInt(info[i]);
			}
			int temp = 0;
			for (int i = 0; i < size; i++) {
				if(i % 2 != 0)
					continue;
				arr[i] = nums[temp++];
			}
			maxVal = Integer.MIN_VALUE;
			minVal = Integer.MAX_VALUE;
			goGame(0);
			System.out.println(maxVal);
			System.out.println(minVal);
			sb.append("#"+tc+" "+(maxVal - minVal)+"\n");
		}
		System.out.println(sb);
	}

	private static void goGame(int cnt) {
		if(cnt == order) {
			print();
			System.out.println();
			oper();
			return;
		}
		int[] idxs = {1, 3, 5, 7};
		for (int i = 0; i < order; i++) {
			if(orders[i] <= 0)
				continue;
			orders[i] -= 1;
			arr[idxs[i]] = i;
			goGame(cnt + 1);
			orders[i] += 1;
		}
	}

	private static void print() {
		for (int i = 0; i < size; i++) {
			System.out.print(arr[i]+" ");
		}
	}

	private static void oper() {
		int val = 0;
		int val2 = 0;
		int op;
		int res;
		val = arr[0];
		for (int i = 1; i < size; i += 2) {
			if(i + 1 == size - 1)
				break;
			op = arr[i];
			val2 = arr[i + 1];

			switch (op) {
			case 0:
				val = val + val2;
				break;
			case 1:
				val = val - val2;
				break;
			case 2:
				val = val * val2;
				break;
			case 3:
				if(val2 == 0)
					return;
				val = val / val2;
				break;
			default:
				break;
			}
		}
		
		if(val > maxVal)
			maxVal = val;
		if(val < minVal)
			minVal = val;
	}
}
