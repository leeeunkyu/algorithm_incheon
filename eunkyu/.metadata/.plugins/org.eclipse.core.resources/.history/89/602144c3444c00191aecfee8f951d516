package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

//10:11
public class Main_4902 {
	
	static int n;
	static int[][] arr;
	static int size;
	static boolean[][] type;
	static int width;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
		StringBuilder sb = new StringBuilder();
		while(Integer.parseInt(str[0]) != 0) {
			n = Integer.parseInt(str[0]);
			width = (2 * n) - 1;
			arr = new int[n][width];
			type = new boolean[n][width];
		
			init();
			
			int temp = 1;
			for (int i = 0; i < n; i++) {
				int width = i * 2 + 1;
				int k = 0;
				for (int j = n - (1 + i); k < width; j++) {
					arr[i][j] = Integer.parseInt(str[temp]);
					if((i + j) % 2 == 0)
						type[i][j] = true;
					++temp;
					++k;
				}
			}			
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < width; j++) {
					if(type[i][j] && arr[i][j] < 1001) {
						int res = dfs(i, j);
					}
				}
			}
			str = br.readLine().split(" ");
		}
		System.out.println(sb);
	
	
	}

	private static void init() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < width; j++) {
				arr[i][j] = 1001;
			}
		}
		
	}

	private static int dfs(int y, int x) {
		int size = n - y;
		
		int[] resList = new int[size];
		resList[0] = arr[y][x];
		for (int i = 1; i < size; i++) {
			int val = findVal(y - i, x, i);
			resList[i] = resList[i - 1] + val;   			
		}
		Arrays.sort(resList);
		return resList[resList.length - 1];
	}


	private static int findVal(int y, int x, int step) {
		int dx[] = setDx(step + 1);
		int sum = 0;
		for (int i = 0; i < step; i++) {
			int nextX = x + dx[i];//1(2Ãþ),2(3Ãþ)...
			sum += arr[y][nextX];
		}
		return sum;
	}

	private static int[] setDx(int size) {
		int xSize = size * 2 - 1;
		int dx[] = new int[xSize];
		int temp = 0;
		int split = 1;
		int cnt = 1;
		for (int i = 0; i < xSize; i++) {
			if(split <= cnt) {
				temp = split * -1;
				cnt = 0;
				split += 1;
			}
			dx[i] = temp;
			temp ++;
			cnt++;
		}
		return dx;
	}
}

class Point_4902 {
	int y;
	int x;
	int size;
	
	public Point_4902(int y, int x, int size) {
		super();
		this.y = y;
		this.x = x;
		this.size = size;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}
}

