package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Solution_1949 {
	
	static int n;
	static int k;
	static int[][] arr;
	static Queue<Point_1949> points;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testCase = Integer.parseInt(br.readLine());
		
		for (int tc = 0; tc < testCase; tc++) {
			String[] str = br.readLine().split(" ");
			n = Integer.parseInt(str[0]);
			k = Integer.parseInt(str[1]);
			arr = new int[n][n];
			int max = Integer.MAX_VALUE;
			points = new LinkedList<Point_1949>();
			
			for (int i = 0; i < n; i++) {
				String[] info = br.readLine().split(" ");
				for (int j = 0; j < n; j++) {
					int val = Integer.parseInt(info[j]);
					arr[i][j] = val;
					if(val > max) {
						if(val == max) {
							points.add(new Point_1949(i, j));
						}
						points.clear();
						max = val;
						points.add(new Point_1949(i, j));
					}
				}
			}
			
			goWalk();
			
		}
	}

	private static void goWalk() {
		while(!points.isEmpty()) {
	 		Point_1949 point = points.poll();
	 		for (int i = 0; i < arr.length; i++) {
				for (int j = 0; j < arr.length; j++) {
					
				}
			}
		}
	}
}	

class Point_1949 {
	int y;
	int x;

	public Point_1949(int y, int x) {
		super();
		this.y = y;
		this.x = x;
	}
	
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	
}