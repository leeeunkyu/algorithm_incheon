#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;

int N, res = 987654321;
int map[100][100];
int visited[100][100];
int Copy[100][100];
int bridge[100][100];
int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };
queue<pair<int,int>> q;
vector<int> reslist;
void reset(int(*map1)[100]) {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			map1[i][j] = 0;
		}
	}
}
void ConstructBridge() {
	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || ny < 0 || nx >= N || ny >= N) continue;
			if (Copy[nx][ny] != 0 && Copy[nx][ny] != Copy[x][y]) {
				reslist.push_back(bridge[nx][ny] + bridge[x][y]);
			}
			if (Copy[nx][ny] == 0) {
				q.push(make_pair(nx, ny));
				Copy[nx][ny] = Copy[x][y];
				bridge[nx][ny] = bridge[x][y] + 1;
			}
		}
	}

}
void NumberingMap(int x, int y, int num) {
	Copy[x][y] = num;
	visited[x][y] = 1;
	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (nx < 0 || ny < 0 || ny >= N || ny >= N) continue;
		if (map[nx][ny] != 0 && visited[nx][ny] == 0) {
			NumberingMap(nx, ny, num);
		}
	}
}
int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &map[i][j]);
		}
	}
	reset(visited);
	//1. 육지 구분
	int num = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] != 0 && visited[i][j] == 0) {
				num++;
				NumberingMap(i,j, num);
			}
		}
	}
	/*printf("\n");
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			printf("%d ", Copy[i][j]);
		}
		printf("\n");
	}*/
	reset(visited);
	//2. 땅 넓히기
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			//방문하지 않은 육지 경우
			if (Copy[i][j] != 0) {		
				q.push(make_pair(i, j));
			}
		}
	}
	ConstructBridge();
	/*printf("\n");
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			printf("%d ", bridge[i][j]);
		}
		printf("\n");
	}*/
	for (int i = 0; i < reslist.size(); i++) {
		if (res > reslist.at(i)) {
			res = reslist.at(i);
		}
	}
	printf("%d", res);

}
