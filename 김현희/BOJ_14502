#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;
int N, M;
int map[8][8];
int map_copy[8][8];
int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1 };
int max_value = 0;

void reset(int (*map1)[8], int (*map2)[8]) {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			map1[i][j] = map2[i][j];
		}
	}
}

void Virus() {
	int virus_map[8][8];
	reset(virus_map, map_copy);
	queue<pair<int, int>> q;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (virus_map[i][j]==2) {
				q.push(make_pair(i, j));
			}
		}
	}
	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || ny < 0 || nx >= N || ny >= M) continue;
			if (virus_map[nx][ny] == 0) {
				virus_map[nx][ny] = 2;
				q.push(make_pair(nx, ny));
			}
		}
	}
	int res = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (virus_map[i][j] == 0) {
				res+=1;
			}
		}
	}
	
	max_value = max(max_value, res);

}
void Wall(int cnt) {
	
	if (cnt == 3) {
		Virus();
		return;
	}
	
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map_copy[i][j] == 0) {
				map_copy[i][j] = 1;
				Wall(cnt+1);
				map_copy[i][j] = 0;
			}
				
		}
	}
		


}
int main() {
//	ios::sync_with_stdio(false);
//	cin.tie(NULL);
	scanf("%d %d", &N, &M);
	for (int n = 0; n < N; n++) {
		for (int m = 0; m < M; m++) {
			scanf("%d", &map[n][m]);
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 0) {
				reset(map_copy, map);
				map_copy[i][j] = 1;
				Wall(1);
				map_copy[i][j] = 0;
			}
		}
	}
	printf("%d\n", max_value);
	return 0;
}
